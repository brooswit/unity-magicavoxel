using System.Collections.Generic;
using UnityEngine;

public static class MarchingCubes
{
    // Edge table maps 8-bit corner inside/outside flags to 12-bit edge mask
    private static readonly int[] EdgeTable = new int[256]
    {
        0x000, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
        0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
        0x190, 0x099, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
        0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
        0x230, 0x339, 0x033, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
        0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
        0x3a0, 0x2a9, 0x1a3, 0x0aa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
        0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
        0x460, 0x569, 0x663, 0x76a, 0x066, 0x16f, 0x265, 0x36c,
        0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
        0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0x0ff, 0x3f5, 0x2fc,
        0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
        0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x055, 0x15c,
        0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
        0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0x0cc,
        0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
        0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
        0x0cc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
        0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
        0x15c, 0x055, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
        0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
        0x2fc, 0x3f5, 0x0ff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
        0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
        0x36c, 0x265, 0x16f, 0x066, 0x76a, 0x663, 0x569, 0x460,
        0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
        0x4ac, 0x5a5, 0x6af, 0x7a6, 0x0aa, 0x1a3, 0x2a9, 0x3a0,
        0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
        0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x033, 0x339, 0x230,
        0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
        0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x099, 0x190,
        0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
        0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x000
    };

    // Triangle table: 256 entries each up to 16 edge indices (-1 terminator)
    private static readonly int[,] TriTable = new int[256, 16]
    {
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1,-1},
        {3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1,-1},
        {3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1,-1},
        {3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1,-1},
        {9,8,11,9,11,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1,-1},
        {1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1,-1},
        {9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1,-1},
        {2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1,-1},
        {8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1,-1},
        {9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1,-1},
        {4,7,11,4,11,9,9,11,1,2,1,11,-1,-1,-1,-1},
        {3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1,-1},
        {1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1,-1},
        {4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1,-1},
        {4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1,-1},
        {9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1,-1},
        {1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1,-1},
        {5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1,-1},
        {2,10,5,2,5,3,3,5,8,4,8,5,-1,-1,-1,-1},
        {9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1,-1},
        {0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1,-1},
        {2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1,-1},
        {10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1,-1},
        {4,9,5,0,8,1,1,8,10,11,10,8,-1,-1,-1,-1},
        {5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1,-1},
        {5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1},
        {9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1,-1},
        {0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1,-1},
        {1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1,-1},
        {10,1,2,9,5,0,0,5,3,3,5,7,-1,-1,-1,-1},
        {8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1,-1},
        {2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1},
        {7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1,-1},
        {9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1,-1},
        {2,3,11,0,1,8,8,1,7,5,7,1,-1,-1,-1,-1},
        {11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1,-1},
        {9,5,4,10,1,6,6,1,7,7,1,3,-1,-1,-1,-1},
        {1,6,10,1,7,6,1,0,7,8,7,0,9,5,4,-1},
        {4,0,5,5,0,6,6,0,10,10,0,2,7,6,0,-1},
        {7,6,10,7,10,8,8,10,2,8,2,3,5,4,9,-1},
        {6,11,2,5,4,9,7,8,3,-1,-1,-1,-1,-1,-1,-1},
        {6,11,2,0,8,4,5,4,9,-1,-1,-1,-1,-1,-1,-1},
        {3,11,2,0,1,4,4,1,5,7,8,6,6,8,11,-1},
        {6,11,2,1,5,4,1,4,2,2,4,8,2,8,3,-1},
        {6,10,1,6,1,11,11,1,3,4,9,5,-1,-1,-1,-1},
        {0,8,4,1,6,10,1,11,6,1,3,11,5,4,9,-1},
        {11,6,10,11,10,3,3,10,2,0,5,4,-1,-1,-1,-1},
        {6,11,3,6,3,10,10,3,2,8,5,4,-1,-1,-1,-1},
        {5,7,8,5,8,9,6,10,2,-1,-1,-1,-1,-1,-1,-1},
        {2,6,10,3,0,7,7,0,5,5,0,9,7,5,8,-1},
        {2,6,10,0,1,8,8,1,7,7,1,5,-1,-1,-1,-1},
        {10,2,6,1,5,7,1,7,3,8,7,5,-1,-1,-1,-1},
        {1,3,6,1,6,10,3,8,6,5,6,9,9,6,8,-1},
        {9,5,0,0,5,6,0,6,3,3,6,8,-1,-1,-1,-1},
        {0,1,5,0,5,8,8,5,6,8,6,3,-1,-1,-1,-1},
        {6,8,5,5,8,1,1,8,3,-1,-1,-1,-1,-1,-1,-1},
        {6,9,5,6,8,9,6,3,8,6,10,3,10,1,3,-1},
        {8,9,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1,-1},
        {0,9,5,0,5,3,3,5,6,3,6,8,-1,-1,-1,-1},
        {5,6,8,5,8,1,1,8,0,-1,-1,-1,-1,-1,-1,-1},
        {5,6,8,5,8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {9,6,10,9,0,6,0,3,6,3,10,6,-1,-1,-1,-1},
        {0,1,10,0,10,6,0,6,3,6,10,3,-1,-1,-1,-1},
        {1,9,0,10,6,3,10,3,2,3,6,8,-1,-1,-1,-1},
        {1,9,6,1,6,10,9,8,6,3,6,2,-1,-1,-1,-1},
        {2,3,11,10,6,8,10,8,1,1,8,0,-1,-1,-1,-1},
        {1,10,6,1,6,0,0,6,11,0,11,8,-1,-1,-1,-1},
        {2,3,11,0,1,6,0,6,8,6,1,10,-1,-1,-1,-1},
        {11,8,6,6,8,10,10,8,1,-1,-1,-1,-1,-1,-1,-1},
        {7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {3,0,8,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {0,1,9,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {8,1,9,8,3,1,11,6,7,-1,-1,-1,-1,-1,-1,-1},
        {10,1,2,6,7,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {1,2,10,3,0,8,6,7,11,-1,-1,-1,-1,-1,-1,-1},
        {2,9,0,2,10,9,6,7,11,-1,-1,-1,-1,-1,-1,-1},
        {6,7,11,2,10,3,3,10,8,8,10,9,-1,-1,-1,-1},
        {7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1,-1},
        {2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1,-1},
        {1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1,-1},
        {10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1,-1},
        {10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1,-1},
        {0,3,7,0,7,9,9,7,6,9,6,10,-1,-1,-1,-1},
        {7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1,-1},
        {6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1,-1},
        {8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1,-1},
        {9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1,-1},
        {6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1,-1},
        {1,2,10,3,0,11,11,0,6,6,0,4,11,6,8,-1},
        {11,8,6,6,8,4,2,10,9,2,9,0,-1,-1,-1,-1},
        {11,6,4,11,4,8,2,10,3,3,10,1,-1,-1,-1,-1},
        {7,2,3,7,6,2,8,4,9,8,9,1,8,1,3,-1},
        {7,2,0,7,0,6,6,0,4,-1,-1,-1,-1,-1,-1,-1},
        {3,7,6,3,6,0,0,6,9,9,6,4,-1,-1,-1,-1},
        {6,4,9,6,9,7,7,9,8,-1,-1,-1,-1,-1,-1,-1},
        {6,8,4,11,8,6,1,2,10,-1,-1,-1,-1,-1,-1,-1},
        {1,2,10,3,0,11,11,0,6,6,0,4,-1,-1,-1,-1},
        {0,1,9,11,6,8,8,6,4,-1,-1,-1,-1,-1,-1,-1},
        {11,6,9,11,9,3,3,9,1,6,4,9,-1,-1,-1,-1},
        {4,8,3,4,3,9,9,3,1,-1,-1,-1,-1,-1,-1,-1},
        {0,4,8,1,4,0,1,9,4,-1,-1,-1,-1,-1,-1,-1},
        {8,3,4,4,3,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {4,8,3,4,3,9,9,3,1,-1,-1,-1,-1,-1,-1,-1},
        {10,1,2,9,5,4,7,6,11,8,3,0,-1,-1,-1,-1},
        {6,11,7,1,2,10,0,8,4,9,5,4,-1,-1,-1,-1},
        {7,6,11,5,4,9,2,10,0,0,10,3,-1,-1,-1,-1},
        {11,7,6,10,5,2,2,5,3,3,5,4,3,4,8,-1},
        {9,5,4,2,3,11,1,2,10,7,6,8,8,6,4,-1},
        {4,9,5,0,8,6,0,6,11,0,11,3,1,2,10,-1},
        {11,7,6,8,4,0,2,10,3,3,10,5,3,5,4,-1},
        {2,10,3,3,10,5,3,5,8,8,5,4,11,7,6,-1},
        {7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1,-1},
        {9,5,4,7,6,2,7,2,8,8,2,0,-1,-1,-1,-1},
        {0,1,4,4,1,5,2,3,6,6,3,7,-1,-1,-1,-1},
        {1,5,4,1,4,2,2,4,8,2,8,3,6,7,2,-1},
        {1,3,6,1,6,10,3,7,6,1,9,3,9,8,3,9},
        {10,1,0,10,0,6,6,0,7,7,0,8,5,4,9,-1},
        {0,3,7,0,7,4,4,7,5,6,10,7,7,10,5,-1},
        {7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1,-1},
        {6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1,-1},
        {3,6,11,0,6,3,0,5,6,0,9,5,8,9,0,-1},
        {0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1,-1},
        {6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1},
        {1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1,-1},
        {0,11,3,0,6,11,0,9,6,5,6,9,1,2,10,-1},
        {11,8,5,11,5,6,8,0,5,10,5,2,2,5,0,-1},
        {6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1,-1},
        {5,8,9,5,2,8,5,6,2,8,2,3,-1,-1,-1,-1},
        {9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1},
        {1,5,8,1,8,0,5,6,8,3,8,2,2,8,6,-1},
        {1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {1,3,6,1,6,10,3,8,6,6,8,9,6,9,5,-1},
        {10,1,0,10,0,6,6,0,8,6,8,5,5,8,9,-1},
        {0,3,6,0,6,9,9,6,5,-1,-1,-1,-1,-1,-1,-1},
        {6,5,9,6,9,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {5,6,11,5,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1},
        {3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1,-1},
        {0,11,8,0,5,11,0,1,5,-1,-1,-1,-1,-1,-1,-1},
        {6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1,-1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
    };

    // Pairs of corner indices for each of the 12 edges
    private static readonly int[,] EdgeIndexPairs = new int[12, 2]
    {
        {0,1},{1,2},{2,3},{3,0}, // bottom square
        {4,5},{5,6},{6,7},{7,4}, // top square
        {0,4},{1,5},{2,6},{3,7}  // verticals
    };

    // Corner offsets relative to cube origin
    private static readonly Vector3[] CornerOffsets = new Vector3[8]
    {
        new Vector3(0,0,0), new Vector3(1,0,0), new Vector3(1,0,1), new Vector3(0,0,1),
        new Vector3(0,1,0), new Vector3(1,1,0), new Vector3(1,1,1), new Vector3(0,1,1)
    };

    public static Mesh GenerateMesh(VoxFrame voxFrame, VoxPalette palette, float scale, float smoothness)
    {
        var mesh = new Mesh { indexFormat = UnityEngine.Rendering.IndexFormat.UInt32 };
        if (voxFrame == null || palette == null)
            return mesh;

        int sizeX = voxFrame.sizeX;
        int sizeY = voxFrame.sizeY;
        int sizeZ = voxFrame.sizeZ;

        // Build scalar field at lattice points (sizeX+1, sizeY+1, sizeZ+1)
        float[,,] density = new float[sizeX + 1, sizeY + 1, sizeZ + 1];

        // Helper to get occupancy of voxel cell at (x,y,z) in original indices
        byte GetCell(int cx, int cy, int cz)
        {
            if (cx < 0 || cy < 0 || cz < 0 || cx >= sizeX || cy >= sizeY || cz >= sizeZ)
                return 0;
            // Convert to the mesh-space coordinate used by VoxFrame.GetVoxel: pos = (x, z, -y)
            return voxFrame.GetVoxel(new Vector3(cx, cz, -cy));
        }

        // Corner density = average of the 8 adjacent voxel cells
        for (int z = 0; z <= sizeZ; z++)
        {
            for (int y = 0; y <= sizeY; y++)
            {
                for (int x = 0; x <= sizeX; x++)
                {
                    int count = 0;
                    int sum = 0;
                    for (int dz = -1; dz <= 0; dz++)
                    for (int dy = -1; dy <= 0; dy++)
                    for (int dx = -1; dx <= 0; dx++)
                    {
                        int vx = x + dx;
                        int vy = y + dy;
                        int vz = z + dz;
                        byte c = GetCell(vx, vy, vz);
                        sum += (c != 0) ? 1 : 0;
                        count++;
                    }
                    float baseD = (count > 0) ? (float)sum / count : 0f;
                    density[x, y, z] = baseD;
                }
            }
        }

        // Optional simple smoothing: 1-pass box blur controlled by smoothness [0,1]
        if (smoothness > 0.0001f)
        {
            float[,,] blurred = new float[sizeX + 1, sizeY + 1, sizeZ + 1];
            for (int z = 0; z <= sizeZ; z++)
            {
                for (int y = 0; y <= sizeY; y++)
                {
                    for (int x = 0; x <= sizeX; x++)
                    {
                        float acc = 0f;
                        int cnt = 0;
                        for (int dz = -1; dz <= 1; dz++)
                        {
                            int zz = z + dz; if (zz < 0 || zz > sizeZ) continue;
                            for (int dy = -1; dy <= 1; dy++)
                            {
                                int yy = y + dy; if (yy < 0 || yy > sizeY) continue;
                                for (int dx = -1; dx <= 1; dx++)
                                {
                                    int xx = x + dx; if (xx < 0 || xx > sizeX) continue;
                                    acc += density[xx, yy, zz];
                                    cnt++;
                                }
                            }
                        }
                        float avg = cnt > 0 ? acc / cnt : density[x, y, z];
                        blurred[x, y, z] = Mathf.Lerp(density[x, y, z], avg, Mathf.Clamp01(smoothness));
                    }
                }
            }
            density = blurred;
        }

        List<Vector3> vertices = new List<Vector3>();
        List<int> triangles = new List<int>();
        List<Color32> colors = new List<Color32>();

        float iso = 0.5f;

        // Center pivot consistent with VoxTools (pos = (x, z, -y))
        Vector3 center = new Vector3(sizeX / 2f, sizeZ / 2f, -sizeY / 2f);

        // Iterate cubes in voxel index space
        for (int z = 0; z < sizeZ; z++)
        {
            for (int y = 0; y < sizeY; y++)
            {
                for (int x = 0; x < sizeX; x++)
                {
                    // Corner scalar values and positions
                    float[] cornerVal = new float[8];
                    Vector3[] cornerPos = new Vector3[8];

                    for (int i = 0; i < 8; i++)
                    {
                        int cx = x + (int)CornerOffsets[i].x;
                        int cy = y + (int)CornerOffsets[i].y;
                        int cz = z + (int)CornerOffsets[i].z;
                        cornerVal[i] = density[cx, cy, cz];
                        // Transform to mesh-space: (x, z, -y)
                        Vector3 p = new Vector3(x, z, -y) + CornerOffsets[i];
                        p -= center;
                        p *= scale;
                        cornerPos[i] = p;
                    }

                    // Compute cube index
                    int cubeIndex = 0;
                    for (int i = 0; i < 8; i++)
                    {
                        if (cornerVal[i] > iso) cubeIndex |= 1 << i;
                    }
                    int edgeMask = EdgeTable[cubeIndex];
                    if (edgeMask == 0) continue;

                    // Interpolate vertices on edges
                    Vector3[] edgeVertex = new Vector3[12];
                    Color32[] edgeColor = new Color32[12];

                    for (int e = 0; e < 12; e++)
                    {
                        if ((edgeMask & (1 << e)) == 0) continue;
                        int a0 = EdgeIndexPairs[e, 0];
                        int b0 = EdgeIndexPairs[e, 1];
                        float va = cornerVal[a0];
                        float vb = cornerVal[b0];
                        Vector3 pa = cornerPos[a0];
                        Vector3 pb = cornerPos[b0];
                        float t = (Mathf.Abs(vb - va) < 1e-6f) ? 0.5f : (iso - va) / (vb - va);
                        t = Mathf.Clamp01(t);
                        edgeVertex[e] = Vector3.Lerp(pa, pb, t);

                        // Choose color from nearby voxel cell; sample the cube's 8 cells
                        byte colorIndex = 0;
                        for (int ci = 0; ci < 8; ci++)
                        {
                            int vx = x + (int)CornerOffsets[ci].x;
                            int vy = y + (int)CornerOffsets[ci].y;
                            int vz = z + (int)CornerOffsets[ci].z;
                            byte c = GetCell(vx, vy, vz);
                            if (c != 0) { colorIndex = c; break; }
                        }
                        if (colorIndex > 0 && colorIndex <= 255)
                            edgeColor[e] = palette[colorIndex - 1];
                        else
                            edgeColor[e] = new Color32(200, 200, 200, 255);
                    }

                    // Emit triangles
                    for (int i = 0; i < 16 && TriTable[cubeIndex, i] != -1; i += 3)
                    {
                        int a = TriTable[cubeIndex, i];
                        int b = TriTable[cubeIndex, i + 1];
                        int c = TriTable[cubeIndex, i + 2];

                        int vi = vertices.Count;
                        vertices.Add(edgeVertex[a]);
                        vertices.Add(edgeVertex[b]);
                        vertices.Add(edgeVertex[c]);

                        colors.Add(edgeColor[a]);
                        colors.Add(edgeColor[b]);
                        colors.Add(edgeColor[c]);

                        triangles.Add(vi);
                        triangles.Add(vi + 1);
                        triangles.Add(vi + 2);
                    }
                }
            }
        }

        mesh.SetVertices(vertices);
        mesh.SetTriangles(triangles, 0);
        mesh.SetColors(colors);
        mesh.RecalculateNormals();
        return mesh;
    }
}


